-- this is the tables.moor file
import '../converter/conversation_category_type_converter.dart';
import '../converter/conversation_status_type_converter.dart';
import '../converter/media_status_type_converter.dart';
import '../converter/message_status_type_converter.dart';
import '../converter/user_relationship_converter.dart';
import '../converter/participant_role_converter.dart';
import '../converter/millis_date_converter.dart';
import '../converter/message_action_converter.dart';
import '../../enum/media_status.dart';
import '../../enum/message_category.dart';
import '../../enum/message_status.dart';
import '../../enum/message_action.dart';

CREATE TABLE addresses (address_id TEXT NOT NULL, type TEXT NOT NULL, asset_id TEXT NOT NULL, destination TEXT NOT NULL, label TEXT NOT NULL, updated_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, reserve TEXT NOT NULL, fee TEXT NOT NULL, tag TEXT, dust TEXT, PRIMARY KEY(address_id));

CREATE TABLE apps (app_id TEXT NOT NULL, app_number TEXT NOT NULL, home_uri TEXT NOT NULL, redirect_uri TEXT NOT NULL, name TEXT NOT NULL, icon_url TEXT NOT NULL, category TEXT, description TEXT NOT NULL, app_secret TEXT NOT NULL, capabilities TEXT, creator_id TEXT NOT NULL, resource_patterns TEXT, updated_at INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(app_id));

CREATE TABLE assets (asset_id TEXT NOT NULL,symbol TEXT NOT NULL,name TEXT NOT NULL,icon_url TEXT NOT NULL,balance TEXT NOT NULL,destination TEXT NOT NULL,tag TEXT,price_btc TEXT NOT NULL,price_usd TEXT NOT NULL,chain_id TEXT NOT NULL,change_usd TEXT NOT NULL,change_btc TEXT NOT NULL,confirmations INTEGER NOT NULL,asset_key TEXT, reserve TEXT, PRIMARY KEY(asset_id));

CREATE TABLE circle_conversations ( conversation_id TEXT NOT NULL, circle_id TEXT NOT NULL, user_id TEXT, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, pin_time INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(conversation_id, circle_id) );

CREATE TABLE circles ( circle_id TEXT NOT NULL, name TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, ordered_at INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(circle_id) );

CREATE TABLE conversations ( conversation_id TEXT NOT NULL, owner_id TEXT, category TEXT MAPPED BY `const ConversationCategoryTypeConverter()`, name TEXT, icon_url TEXT, announcement TEXT, code_url TEXT, pay_type TEXT, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, pin_time INTEGER MAPPED BY `const MillisDateConverter()`, last_message_id TEXT, last_message_created_at INTEGER MAPPED BY `const MillisDateConverter()`, last_read_message_id TEXT, unseen_message_count INTEGER, status INTEGER NOT NULL MAPPED BY `const ConversationStatusTypeConverter()`, draft TEXT, mute_until INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(conversation_id) );

CREATE TABLE flood_messages ( message_id TEXT NOT NULL, data TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(message_id) );

CREATE TABLE hyperlinks ( hyperlink TEXT NOT NULL, site_name TEXT NOT NULL, site_title TEXT NOT NULL, site_description TEXT, site_image TEXT, PRIMARY KEY(hyperlink) );

CREATE TABLE jobs ( job_id TEXT NOT NULL, "action" TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, order_id INTEGER, priority INTEGER NOT NULL, user_id TEXT, blaze_message TEXT, conversation_id TEXT, resend_message_id TEXT, run_count INTEGER NOT NULL, PRIMARY KEY(job_id) );

CREATE TABLE message_mentions ( message_id TEXT NOT NULL, conversation_id TEXT NOT NULL, has_read BOOLEAN, PRIMARY KEY(message_id) );

CREATE TABLE messages ( message_id TEXT NOT NULL, conversation_id TEXT NOT NULL, user_id TEXT NOT NULL, category TEXT NOT NULL, content TEXT, media_url TEXT, media_mime_type TEXT, media_size INTEGER, media_duration TEXT, media_width INTEGER, media_height INTEGER, media_hash TEXT, thumb_image TEXT, media_key TEXT, media_digest TEXT, media_status TEXT MAPPED BY `const MediaStatusTypeConverter()`, status TEXT NOT NULL MAPPED BY `const MessageStatusTypeConverter()`, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, "action" TEXT MAPPED BY `const MessageActionConverter()`, participant_id TEXT, snapshot_id TEXT, hyperlink TEXT, name TEXT, album_id TEXT, sticker_id TEXT, shared_user_id TEXT, media_waveform TEXT, quote_message_id TEXT, quote_content TEXT, thumb_url TEXT, caption TEXT, PRIMARY KEY(message_id), FOREIGN KEY(conversation_id) REFERENCES conversations(conversation_id) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE VIRTUAL TABLE IF NOT EXISTS messages_fts USING FTS5( message_id UNINDEXED , conversation_id UNINDEXED , content, created_at UNINDEXED , user_id UNINDEXED , reserved_int UNINDEXED , reserved_text UNINDEXED , tokenize='unicode61' );

CREATE TABLE messages_history ( message_id TEXT NOT NULL, PRIMARY KEY(message_id) );

CREATE TABLE offsets ( "key" TEXT NOT NULL, timestamp TEXT NOT NULL, PRIMARY KEY("key") );

CREATE TABLE participant_session (conversation_id TEXT NOT NULL, user_id TEXT NOT NULL, session_id TEXT NOT NULL, sent_to_server INTEGER, created_at INTEGER MAPPED BY `const MillisDateConverter()`, public_key TEXT, PRIMARY KEY(conversation_id, user_id, session_id));

CREATE TABLE participants ( conversation_id TEXT NOT NULL, user_id TEXT NOT NULL, role TEXT MAPPED By `const ParticipantRoleConverter()`, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(conversation_id,user_id), FOREIGN KEY(conversation_id) REFERENCES conversations(conversation_id) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE TABLE resend_session_messages ( message_id TEXT NOT NULL, user_id TEXT NOT NULL, session_id TEXT NOT NULL, status INTEGER NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(message_id, user_id, session_id) );

CREATE TABLE sent_session_sender_keys ( conversation_id TEXT NOT NULL, user_id TEXT NOT NULL, session_id TEXT NOT NULL, sent_to_server INTEGER NOT NULL, sender_key_id INTEGER, created_at INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(conversation_id,user_id, session_id) );

CREATE TABLE snapshots (snapshot_id TEXT NOT NULL,type TEXT NOT NULL,asset_id TEXT NOT NULL,amount TEXT NOT NULL,created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`,opponent_id TEXT,transaction_hash TEXT,sender TEXT,receiver TEXT,memo TEXT,confirmations INTEGER,PRIMARY KEY(snapshot_id));

CREATE TABLE sticker_albums ( album_id TEXT NOT NULL, name TEXT NOT NULL, icon_url TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, update_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, ordered_at INTEGER NOT NULL DEFAULT 0, user_id TEXT NOT NULL, category TEXT NOT NULL, description TEXT NOT NULL, banner TEXT, added BOOLEAN DEFAULT FALSE , PRIMARY KEY(album_id));

CREATE TABLE sticker_relationships ( album_id TEXT NOT NULL, sticker_id TEXT NOT NULL, PRIMARY KEY(album_id, sticker_id) );

CREATE TABLE stickers ( sticker_id TEXT NOT NULL, album_id TEXT, name TEXT NOT NULL, asset_url TEXT NOT NULL, asset_type TEXT NOT NULL, asset_width INTEGER NOT NULL, asset_height INTEGER NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, last_use_at INTEGER MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(sticker_id) );

CREATE TABLE users ( user_id TEXT NOT NULL, identity_number TEXT NOT NULL, relationship TEXT MAPPED BY `const UserRelationshipConverter()`, full_name TEXT, avatar_url TEXT, phone TEXT, is_verified BOOLEAN, created_at INTEGER MAPPED BY `const MillisDateConverter()`, mute_until INTEGER MAPPED BY `const MillisDateConverter()`, has_pin INTEGER, app_id TEXT, biography TEXT, is_scam INTEGER, PRIMARY KEY(user_id) );

CREATE TABLE transcript_messages (transcript_id TEXT NOT NULL, message_id TEXT NOT NULL, user_id TEXT, user_full_name TEXT, category TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, content TEXT, media_url TEXT, media_name TEXT, media_size INTEGER, media_width INTEGER, media_height INTEGER, media_mime_type TEXT, media_duration TEXT, media_status TEXT MAPPED BY `const MediaStatusTypeConverter()`, media_waveform TEXT, thumb_image TEXT, thumb_url TEXT, media_key TEXT, media_digest TEXT, media_created_at INTEGER MAPPED BY `const MillisDateConverter()`, sticker_id TEXT, shared_user_id TEXT, mentions TEXT, quote_id TEXT, quote_content TEXT, caption TEXT, PRIMARY KEY(transcript_id, message_id));

CREATE TABLE pin_messages ( message_id TEXT NOT NULL, conversation_id TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, PRIMARY KEY (message_id));

CREATE TABLE fiats (code TEXT NOT NULL, rate DOUBLE NOT NULL, PRIMARY KEY(code));

CREATE TABLE favorite_apps (app_id TEXT NOT NULL, user_id TEXT NOT NULL, created_at INTEGER NOT NULL MAPPED BY `const MillisDateConverter()`, PRIMARY KEY(app_id, user_id));

CREATE INDEX IF NOT EXISTS index_conversations_category_status ON conversations(category, status);
CREATE INDEX IF NOT EXISTS index_conversations_mute_until ON conversations(mute_until);
CREATE INDEX IF NOT EXISTS index_flood_messages_created_at ON flood_messages(created_at);
CREATE INDEX IF NOT EXISTS index_jobs_action ON jobs("action");
CREATE INDEX IF NOT EXISTS index_message_mentions_conversation_id_has_read ON message_mentions(conversation_id, has_read);
CREATE INDEX IF NOT EXISTS index_messages_conversation_id_created_at ON messages(conversation_id, created_at DESC);
CREATE INDEX IF NOT EXISTS index_participants_conversation_id_created_at ON participants(conversation_id, created_at);
CREATE INDEX IF NOT EXISTS index_sticker_albums_category_created_at ON sticker_albums(category, created_at DESC);
CREATE INDEX IF NOT EXISTS index_pin_messages_conversation_id ON pin_messages(conversation_id);
CREATE INDEX IF NOT EXISTS index_message_conversation_id_status_user_id ON messages(conversation_id, status, user_id);

CREATE TRIGGER IF NOT EXISTS conversation_last_message_delete AFTER DELETE ON messages BEGIN UPDATE conversations SET last_message_id = (select message_id from messages where conversation_id = old.conversation_id order by created_at DESC limit 1) WHERE conversation_id = old.conversation_id; END;
