import '../mixin.drift';

participantsAvatar:
SELECT user.*
FROM participants AS participant
         left join users user on participant.user_id = user.user_id
WHERE participant.conversation_id = :conversationId
ORDER BY participant.created_at ASC
LIMIT 4;

participantSessionKeyWithoutSelf AS ParticipantSessionKey:
SELECT conversation_id, user_id, session_id, public_key FROM participant_session WHERE conversation_id = :conversationId AND user_id != :userId LIMIT 1;

otherParticipantSessionKey AS ParticipantSessionKey:
SELECT conversation_id, user_id, session_id, public_key FROM participant_session WHERE conversation_id = :conversationId AND user_id == :userId AND session_id != :sessionId ORDER BY created_at DESC LIMIT 1;

notSendSessionParticipants:
SELECT p.* FROM participant_session p LEFT JOIN users u ON p.user_id = u.user_id WHERE p.conversation_id = :conversationId AND p.session_id != :sessionId AND u.app_id IS NULL AND p.sent_to_server IS NULL;

participantSessionKeyBySessionId:
SELECT * FROM participant_session WHERE conversation_id = :conversationId AND session_id == :sessionId;

groupParticipantsByConversationId AS ParticipantUser:
SELECT p.conversation_id AS conversationId, p.role AS role, p.created_at AS createdAt,
u.user_id AS userId, u.identity_number AS identityNumber, u.relationship AS relationship, u.biography AS biography, u.full_name AS fullName,
u.avatar_url AS avatarUrl, u.phone AS phone, u.is_verified AS isVerified, u.created_at AS userCreatedAt, u.mute_until AS muteUntil,
u.has_pin AS hasPin, u.app_id AS appId, u.is_scam AS isScam
FROM participants p, users u
WHERE p.conversation_id = :conversationId
AND p.user_id = u.user_id
ORDER BY p.created_at DESC;

userIdByIdentityNumber:
SELECT u.user_id FROM users u INNER JOIN participants p ON p.user_id = u.user_id
        WHERE p.conversation_id = :conversationId AND u.identity_number = :identityNumber;
