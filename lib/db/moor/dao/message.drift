import '../mixin.drift';

_baseQuoteMessageItem AS QuoteMessageItem:
SELECT message.message_id AS messageId,
    message.conversation_id AS conversationId,
    sender.user_id AS userId,
    sender.full_name AS userFullName,
    sender.identity_number AS userIdentityNumber,
    sender.app_id AS appId,
    message.category AS type,
    message.content AS content,
    message.created_at AS createdAt,
    message.status AS status,
    message.media_status AS mediaStatus,
    message.media_waveform AS mediaWaveform,
    message.name AS mediaName,
    message.media_mime_type AS mediaMimeType,
    message.media_size AS mediaSize,
    message.media_width AS mediaWidth,
    message.media_height AS mediaHeight,
    message.thumb_image AS thumbImage,
    message.thumb_url AS thumbUrl,
    message.media_url AS mediaUrl,
    message.media_duration AS mediaDuration,
    message.sticker_id AS stickerId,
    sticker.asset_url AS assetUrl,
    sticker.asset_width AS assetWidth,
    sticker.asset_height AS assetHeight,
    sticker.name AS assetName,
    sticker.asset_type AS assetType,
    message.shared_user_id AS sharedUserId,
    shareUser.full_name AS sharedUserFullName,
    shareUser.identity_number AS sharedUserIdentityNumber,
    shareUser.avatar_url AS sharedUserAvatarUrl,
    shareUser.is_verified AS sharedUserIsVerified,
    shareUser.app_id AS sharedUserAppId
FROM messages message
    INNER JOIN users sender ON message.user_id = sender.user_id
    LEFT JOIN stickers sticker ON sticker.sticker_id = message.sticker_id
    LEFT JOIN users shareUser ON message.shared_user_id = shareUser.user_id
    LEFT JOIN message_mentions messageMention ON message.message_id = messageMention.message_id
WHERE $where
ORDER BY $order
LIMIT $limit;

messageStatusById:
SELECT status FROM messages WHERE message_id = :messageId LIMIT 1;

sendingMessage AS SendingMessage:
SELECT m.message_id, m.conversation_id, m.user_id, m.category, m.content, m.media_url, m.media_mime_type,
      m.media_size, m.media_duration, m.media_width, m.media_height, m.media_hash, m.thumb_image, m.media_key,
      m.media_digest, m.media_status, m.status, m.created_at, m.action, m.participant_id, m.snapshot_id, m.hyperlink,
      m.name, m.album_id, m.sticker_id, m.shared_user_id, m.media_waveform, m.caption, m.quote_message_id, m.quote_content,
      rm.status AS resend_status, rm.user_id AS resend_user_id, rm.session_id AS resend_session_id
      FROM messages m LEFT JOIN resend_session_messages rm on m.message_id = rm.message_id
      WHERE m.message_id = :message_id AND (m.status = 'SENDING' OR rm.status = 1) AND m.content IS NOT NULL LIMIT 1;



notificationMessage AS NotificationMessage:
SELECT m.message_id AS messageId,
    m.conversation_id AS conversationId,
    sender.user_id AS senderId,
    sender.full_name AS senderFullName,
    m.category AS type,
    m.content AS content,
    m.quote_content AS quoteContent,
    m.status AS status,
    COALESCE(conversationOwner.full_name, c.name) AS name,
    COALESCE(conversationOwner.mute_until, c.mute_until) AS muteUntil,
    m.created_at AS createdAt,
    c.category AS category,
    m.action AS actionName,
    conversationOwner.relationship AS relationship,
    pu.full_name AS participantFullName,
    pu.user_id AS participantUserId,
    c.owner_id AS ownerUserId
FROM messages m
    INNER JOIN users sender ON m.user_id = sender.user_id
    LEFT JOIN conversations c ON m.conversation_id = c.conversation_id
    LEFT JOIN users conversationOwner ON c.category = 'CONTACT'
    AND c.owner_id = conversationOwner.user_id
    LEFT JOIN message_mentions mm ON m.message_id = mm.message_id
    LEFT JOIN users pu ON pu.user_id = m.participant_id
WHERE m.message_id in :messageId
ORDER BY m.created_at DESC;


searchMessageByIds AS SearchMessageDetailItem:
SELECT m.message_id messageId,
    u.user_id AS senderId,
    u.avatar_url AS senderAvatarUrl,
    u.full_name AS senderFullName,
    m.status AS status,
    m.category AS type,
    m.content AS content,
    m.created_at AS createdAt,
    m.name AS mediaName,
    u.app_id AS appId,
    u.is_verified AS verified,
    u.membership AS membership,
    c.owner_id AS ownerId,
    c.category AS category,
    c.conversation_id AS conversationId,
    COALESCE(owner.avatar_url, c.icon_url) AS avatarUrl,
    COALESCE(owner.full_name, c.name) AS name
FROM messages m
    INNER JOIN conversations c ON c.conversation_id = m.conversation_id
    INNER JOIN users u ON m.user_id = u.user_id
    INNER JOIN users owner ON c.category = 'CONTACT' AND c.owner_id = owner.user_id
WHERE m.message_id IN :messageIds
ORDER BY m.created_at DESC,
    m.rowid DESC;

miniMessageByIds AS MiniMessageItem:
SELECT conversation_id as conversationId, message_id as messageId FROM messages WHERE message_id IN :messageIds;

_searchMessage AS SearchMessageDetailItem:
SELECT m.message_id messageId,
    u.user_id AS senderId,
    u.avatar_url AS senderAvatarUrl,
    u.full_name AS senderFullName,
    m.status AS status,
    m.category AS type,
    m.content AS content,
    m.created_at AS createdAt,
    m.name AS mediaName,
    u.app_id AS appId,
    u.is_verified AS verified,
    u.membership AS membership,
    c.owner_id AS ownerId,
    c.category AS category,
    c.conversation_id AS conversationId,
    COALESCE(owner.avatar_url, c.icon_url) AS avatarUrl,
    COALESCE(owner.full_name, c.name) AS name
FROM messages m
    INNER JOIN conversations c ON c.conversation_id = m.conversation_id
    INNER JOIN users u ON m.user_id = u.user_id
    INNER JOIN users owner ON c.category = 'CONTACT' AND c.owner_id = owner.user_id
WHERE $where
ORDER BY m.created_at DESC,
    m.rowid DESC
LIMIT $limit;

countMessages:
SELECT count(1) FROM messages;

countMediaMessages:
SELECT count(1) FROM messages WHERE category IN ('SIGNAL_IMAGE', 'SIGNAL_VIDEO', 'SIGNAL_DATA', 'SIGNAL_AUDIO', 'PLAIN_IMAGE', 'PLAIN_VIDEO', 'PLAIN_DATA', 'PLAIN_AUDIO', 'ENCRYPTED_IMAGE', 'ENCRYPTED_VIDEO', 'ENCRYPTED_DATA', 'ENCRYPTED_AUDIO');

bigQuoteMessage as QuoteMinimal:
SELECT rowid, conversation_id, quote_message_id FROM messages WHERE rowid > :rowId AND quote_message_id IS NOT NULL AND quote_message_id != '' AND length(quote_content) > 10240 GROUP BY quote_message_id ORDER BY rowid ASC LIMIT :limit;
